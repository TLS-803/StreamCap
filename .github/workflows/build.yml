name: Build and Package

on:
  push:
    branches: [ main, master ]
    paths:
      - 'app/**'
      - 'main.py'
      - 'pyproject.toml'
      - 'requirements.txt'
      - 'assets/**'
      - 'config/**'
      - 'locales/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'app/**'
      - 'main.py'
      - 'pyproject.toml'
      - 'requirements.txt'
      - 'assets/**'
      - 'config/**'
      - 'locales/**'

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            platform: windows
            extension: .exe
            artifact_name: StreamCap-Windows
          - os: macos-latest
            platform: macos
            extension: .dmg
            artifact_name: StreamCap-macOS

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      timeout-minutes: 10
      run: |
        python -m pip install --upgrade pip --timeout 300
        pip install pyinstaller --timeout 300
        pip install -r requirements.txt --timeout 300

    - name: Extract version from pyproject.toml
      id: version
      shell: bash
      run: |
        python -c "
        import tomllib
        with open('pyproject.toml', 'rb') as f:
            data = tomllib.load(f)
            version = data['project']['version']
            print(f'version={version}')
        " >> $GITHUB_OUTPUT

    - name: Build Flet app for Windows
      if: matrix.platform == 'windows'
      timeout-minutes: 15
      run: |
        # 创建必要的目录结构
        echo "📁 Creating necessary directories..."
        mkdir -p downloads logs
        
        # 使用PyInstaller直接构建Windows应用程序（确保完整性）
        echo "🚀 Building Windows app with PyInstaller directly..."
        
        pyinstaller --name StreamCap \
          --icon assets/icon.ico \
          --distpath dist \
          --workpath build \
          --add-data "assets;assets" \
          --add-data "config;config" \
          --add-data "locales;locales" \
          --add-data "downloads;downloads" \
          --add-data "logs;logs" \
          --hidden-import app \
          --hidden-import app.api \
          --hidden-import app.core \
          --hidden-import app.ui \
          --hidden-import app.utils \
          --hidden-import app.models \
          --hidden-import app.lifecycle \
          --hidden-import app.messages \
          --hidden-import app.scripts \
          --hidden-import flet \
          --hidden-import flet.core \
          --hidden-import flet.utils \
          --hidden-import requests \
          --hidden-import json \
          --hidden-import threading \
          --hidden-import subprocess \
          --hidden-import os \
          --hidden-import sys \
          --hidden-import pathlib \
          --hidden-import httpx \
          --hidden-import aiofiles \
          --hidden-import screeninfo \
          --hidden-import streamget \
          --windowed \
          --onefile \
          main.py
        
        # 检查构建结果
        echo "=== Windows build completed, checking results ==="
        Get-ChildItem -Path dist -Force
        
        # 验证可执行文件
        if (Test-Path "dist/StreamCap.exe") {
          echo "✅ Windows executable created successfully"
          Get-ItemProperty "dist/StreamCap.exe" | Select-Object Name, Length, LastWriteTime
        } else {
          echo "❌ Windows executable not found!"
          exit 1
        }

    - name: Build Flet app for macOS
      if: matrix.platform == 'macos'
      timeout-minutes: 15
      run: |
        # 创建必要的目录结构
        echo "📁 Creating necessary directories..."
        mkdir -p downloads logs
        
        # 使用PyInstaller构建完整的macOS应用程序包
        echo "🚀 Building macOS app with PyInstaller..."
        
        pyinstaller --name StreamCap \
          --icon assets/icons/Appicon.icns \
          --distpath dist \
          --workpath build \
          --add-data "assets:assets" \
          --add-data "config:config" \
          --add-data "locales:locales" \
          --add-data "downloads:downloads" \
          --add-data "ffmpeg:ffmpeg" \
          --add-data "logs:logs" \
          --hidden-import app \
          --hidden-import app.api \
          --hidden-import app.core \
          --hidden-import app.ui \
          --hidden-import app.utils \
          --hidden-import app.models \
          --hidden-import app.lifecycle \
          --hidden-import app.messages \
          --hidden-import app.scripts \
          --hidden-import flet \
          --hidden-import flet.core \
          --hidden-import flet.utils \
          --hidden-import requests \
          --hidden-import json \
          --hidden-import threading \
          --hidden-import subprocess \
          --hidden-import os \
          --hidden-import sys \
          --hidden-import pathlib \
          --hidden-import httpx \
          --hidden-import aiofiles \
          --hidden-import screeninfo \
          --hidden-import streamget \
          --hidden-import flet_video \
          --hidden-import dotenv \
          --hidden-import multiprocessing \
          --hidden-import argparse \
          --hidden-import time \
          --windowed \
          --osx-bundle-identifier com.tls803.streamcap \
          main.py
        
        # 检查构建结果
        echo "=== macOS build completed, checking results ==="
        ls -la dist/
        
        # 验证应用程序包
        if [ -d "dist/StreamCap.app" ]; then
          echo "✅ macOS app bundle created successfully"
          echo "📦 App bundle contents:"
          find dist/StreamCap.app -type f | head -20
          
          # 检查可执行文件
          if [ -f "dist/StreamCap.app/Contents/MacOS/StreamCap" ]; then
            echo "✅ Executable found in app bundle"
            file dist/StreamCap.app/Contents/MacOS/StreamCap
          else
            echo "❌ Executable not found in app bundle!"
            exit 1
          fi
        else
          echo "❌ macOS app bundle not found!"
          exit 1
        fi

    - name: Prepare macOS app for DMG
      if: matrix.platform == 'macos'
      run: |
        cd dist
        
        # 检查PyInstaller生成的应用程序
        if [ ! -d "StreamCap.app" ]; then
          echo "❌ Error: StreamCap.app not found!"
          ls -la
          exit 1
        fi
        
        echo "=== 🔍 Preparing macOS app for DMG ==="
        
        # 设置应用程序权限
        echo "🔐 Setting app permissions"
        chmod -R 755 StreamCap.app
        xattr -cr StreamCap.app 2>/dev/null || echo "No extended attributes to remove"
        
        # 验证应用程序结构
        echo "📁 App structure:"
        ls -la StreamCap.app/Contents/
        echo "💻 Executable:"
        ls -la StreamCap.app/Contents/MacOS/
        
        # 详细检查应用包内容
        echo "🔍 Detailed app contents verification:"
        if [ -d "StreamCap.app/Contents/MacOS/assets" ]; then
          echo "✅ Assets directory found"
          ls -la StreamCap.app/Contents/MacOS/assets/
        else
          echo "❌ Assets directory missing"
        fi
        
        if [ -d "StreamCap.app/Contents/MacOS/config" ]; then
          echo "✅ Config directory found"
          ls -la StreamCap.app/Contents/MacOS/config/
        else
          echo "❌ Config directory missing"
        fi
        
        if [ -d "StreamCap.app/Contents/MacOS/locales" ]; then
          echo "✅ Locales directory found"
          ls -la StreamCap.app/Contents/MacOS/locales/
        else
          echo "❌ Locales directory missing"
        fi
        
        if [ -d "StreamCap.app/Contents/MacOS/downloads" ]; then
          echo "✅ Downloads directory found"
        else
          echo "❌ Downloads directory missing"
        fi
        
        if [ -d "StreamCap.app/Contents/MacOS/ffmpeg" ]; then
          echo "✅ FFmpeg directory found"
        else
          echo "❌ FFmpeg directory missing"
        fi
        
        if [ -d "StreamCap.app/Contents/MacOS/logs" ]; then
          echo "✅ Logs directory found"
        else
          echo "❌ Logs directory missing"
        fi
        
        echo "✅ macOS app ready for DMG creation"

    - name: Create archive for Windows
      if: matrix.platform == 'windows'
      shell: bash
      run: |
        cd dist
        7z a -tzip "../${{ matrix.artifact_name }}-v${{ steps.version.outputs.version }}.zip" StreamCap.exe

    - name: Create DMG for macOS
      if: matrix.platform == 'macos'
      run: |
        echo "💿 Creating macOS DMG package..."
        
        # 创建临时目录用于DMG内容
        mkdir -p dmg_temp
        cp -R dist/StreamCap.app dmg_temp/
        
        # 创建Applications文件夹的符号链接（方便用户拖拽安装）
        ln -s /Applications dmg_temp/Applications
        
        # 使用hdiutil创建DMG（更可靠的方法）
        hdiutil create -volname "StreamCap v${{ steps.version.outputs.version }}" \
          -srcfolder dmg_temp \
          -ov \
          -format UDZO \
          -imagekey zlib-level=9 \
          "${{ matrix.artifact_name }}-v${{ steps.version.outputs.version }}.dmg"
        
        # 验证DMG创建成功
        if [ -f "${{ matrix.artifact_name }}-v${{ steps.version.outputs.version }}.dmg" ]; then
          echo "✅ DMG created successfully"
          ls -lh "${{ matrix.artifact_name }}-v${{ steps.version.outputs.version }}.dmg"
          
          # 快速验证DMG内容
          echo "🔍 Verifying DMG contents..."
          hdiutil attach "${{ matrix.artifact_name }}-v${{ steps.version.outputs.version }}.dmg" -readonly -mountpoint /tmp/verify_dmg
          ls -la /tmp/verify_dmg/
          hdiutil detach /tmp/verify_dmg
        else
          echo "❌ Failed to create DMG"
          exit 1
        fi
        
        # 清理临时目录
        rm -rf dmg_temp

    - name: Upload Windows artifact
      if: matrix.platform == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-v${{ steps.version.outputs.version }}
        path: ${{ matrix.artifact_name }}-v${{ steps.version.outputs.version }}.zip
        retention-days: 30

    - name: Upload macOS artifact
      if: matrix.platform == 'macos'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-v${{ steps.version.outputs.version }}
        path: ${{ matrix.artifact_name }}-v${{ steps.version.outputs.version }}.dmg
        retention-days: 30

  create-tag:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Extract version from pyproject.toml
      id: version
      run: |
        python -c "
        import tomllib
        with open('pyproject.toml', 'rb') as f:
            data = tomllib.load(f)
            version = data['project']['version']
            print(f'version={version}')
        " >> $GITHUB_OUTPUT

    - name: Check if tag exists
      id: check_tag
      run: |
        git fetch --tags
        if git tag -l "v${{ steps.version.outputs.version }}" | grep -q "v${{ steps.version.outputs.version }}"; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Tag v${{ steps.version.outputs.version }} already exists, skipping creation"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Tag v${{ steps.version.outputs.version }} does not exist, will create"
        fi

    - name: Create and push tag
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
        git push origin "v${{ steps.version.outputs.version }}"