name: Build and Package

on:
  push:
    branches: [ main, master ]
    paths:
      - 'app/**'
      - 'main.py'
      - 'pyproject.toml'
      - 'requirements.txt'
      - 'assets/**'
      - 'config/**'
      - 'locales/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'app/**'
      - 'main.py'
      - 'pyproject.toml'
      - 'requirements.txt'
      - 'assets/**'
      - 'config/**'
      - 'locales/**'

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            platform: windows
            extension: .exe
            artifact_name: StreamCap-Windows
          - os: macos-latest
            platform: macos
            extension: .app
            artifact_name: StreamCap-macOS

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      timeout-minutes: 10
      run: |
        python -m pip install --upgrade pip --timeout 300
        pip install pyinstaller --timeout 300
        pip install -r requirements.txt --timeout 300

    - name: Extract version from pyproject.toml
      id: version
      shell: bash
      run: |
        python -c "
        import tomllib
        with open('pyproject.toml', 'rb') as f:
            data = tomllib.load(f)
            version = data['project']['version']
            print(f'version={version}')
        " >> $GITHUB_OUTPUT

    - name: Build Flet app for Windows
      if: matrix.platform == 'windows'
      timeout-minutes: 15
      run: |
        flet pack main.py --name StreamCap --icon assets/icon.ico --distpath dist --add-data "assets;assets" --add-data "config;config" --add-data "locales;locales" --hidden-import app --hidden-import app.api --hidden-import app.core --hidden-import app.ui --hidden-import app.utils --hidden-import app.models --hidden-import app.lifecycle --hidden-import app.messages --hidden-import app.scripts

    - name: Build Flet app for macOS
      if: matrix.platform == 'macos'
      timeout-minutes: 15
      run: |
        # 使用flet pack构建应用程序
        flet pack main.py --name StreamCap --icon assets/icons/Appicon.icns --distpath dist --add-data "assets:assets" --add-data "config:config" --add-data "locales:locales" --hidden-import app --hidden-import app.api --hidden-import app.core --hidden-import app.ui --hidden-import app.utils --hidden-import app.models --hidden-import app.lifecycle --hidden-import app.messages --hidden-import app.scripts
        
        # 检查构建结果
        echo "=== Build completed, checking results ==="
        ls -la dist/

    - name: Fix macOS app permissions and structure
      if: matrix.platform == 'macos'
      run: |
        cd dist
        
        # 检查应用程序是否存在
        if [ ! -d "StreamCap.app" ]; then
          echo "❌ Error: StreamCap.app not found!"
          ls -la
          exit 1
        fi
        
        echo "=== 🔍 Original App Structure ==="
        find StreamCap.app -type f | head -20
        
        # 确保Contents目录结构正确
        mkdir -p StreamCap.app/Contents/MacOS
        mkdir -p StreamCap.app/Contents/Resources
        
        # 查找可执行文件
        EXECUTABLE_PATH=""
        if [ -f "StreamCap.app/Contents/MacOS/StreamCap" ]; then
          EXECUTABLE_PATH="StreamCap.app/Contents/MacOS/StreamCap"
        else
          # 查找可能的可执行文件位置
          EXECUTABLE_PATH=$(find StreamCap.app -name "StreamCap" -type f -executable | head -1)
          if [ -n "$EXECUTABLE_PATH" ]; then
            echo "📁 Found executable at: $EXECUTABLE_PATH"
            # 如果不在正确位置，移动它
            if [ "$EXECUTABLE_PATH" != "StreamCap.app/Contents/MacOS/StreamCap" ]; then
              echo "📦 Moving executable to correct location"
              mv "$EXECUTABLE_PATH" StreamCap.app/Contents/MacOS/StreamCap
              EXECUTABLE_PATH="StreamCap.app/Contents/MacOS/StreamCap"
            fi
          fi
        fi
        
        if [ -n "$EXECUTABLE_PATH" ] && [ -f "$EXECUTABLE_PATH" ]; then
          echo "✅ Setting executable permissions for: $EXECUTABLE_PATH"
          chmod +x "$EXECUTABLE_PATH"
          
          # 检查文件类型
          echo "📋 File type:"
          file "$EXECUTABLE_PATH"
        else
          echo "❌ No executable found!"
          find StreamCap.app -type f -executable
          exit 1
        fi
        
        # 备份并显示原始Info.plist
        if [ -f "StreamCap.app/Contents/Info.plist" ]; then
          echo "=== 📄 Original Info.plist ==="
          plutil -p StreamCap.app/Contents/Info.plist 2>/dev/null || cat StreamCap.app/Contents/Info.plist
          cp StreamCap.app/Contents/Info.plist StreamCap.app/Contents/Info.plist.backup
        fi
        
        # 复制我们的自定义Info.plist
        if [ -f "../assets/Info.plist" ]; then
          echo "✅ Copying custom Info.plist"
          cp ../assets/Info.plist StreamCap.app/Contents/Info.plist
          
          # 验证Info.plist格式
          if plutil -lint StreamCap.app/Contents/Info.plist; then
            echo "✅ Info.plist format is valid"
          else
            echo "❌ Info.plist format is invalid, restoring backup"
            if [ -f "StreamCap.app/Contents/Info.plist.backup" ]; then
              cp StreamCap.app/Contents/Info.plist.backup StreamCap.app/Contents/Info.plist
            fi
          fi
        else
          echo "❌ Custom Info.plist not found at ../assets/Info.plist"
          ls -la ../assets/
        fi
        
        # 复制图标文件（如果存在）
        if [ -f "../assets/icons/Appicon.icns" ]; then
          echo "🎨 Copying app icon"
          cp ../assets/icons/Appicon.icns StreamCap.app/Contents/Resources/
        fi
        
        # 移除扩展属性（quarantine标记）
        echo "🧹 Removing quarantine attributes"
        xattr -cr StreamCap.app 2>/dev/null || echo "No extended attributes to remove"
        
        # 设置正确的权限
        echo "🔐 Setting correct permissions"
        chmod -R 755 StreamCap.app
        chmod +x StreamCap.app/Contents/MacOS/StreamCap
        
        # 验证最终应用程序结构
        echo "=== 📁 Final App Structure ==="
        ls -la StreamCap.app/Contents/
        echo "=== 💻 MacOS Directory ==="
        ls -la StreamCap.app/Contents/MacOS/
        echo "=== 🎯 Resources Directory ==="
        ls -la StreamCap.app/Contents/Resources/ 2>/dev/null || echo "No Resources directory"
        
        # 显示最终Info.plist内容
        echo "=== 📄 Final Info.plist Content ==="
        if [ -f "StreamCap.app/Contents/Info.plist" ]; then
          plutil -p StreamCap.app/Contents/Info.plist
        else
          echo "❌ Info.plist still not found"
        fi
        
        # 检查应用程序签名状态
        echo "=== 🔏 Code Signature Status ==="
        codesign -dv StreamCap.app 2>&1 || echo "App is not signed (expected for CI build)"
        
        # 最终验证
        echo "=== ✅ Final Verification ==="
        echo "App bundle exists: $([ -d StreamCap.app ] && echo 'YES' || echo 'NO')"
        echo "Executable exists: $([ -f StreamCap.app/Contents/MacOS/StreamCap ] && echo 'YES' || echo 'NO')"
        echo "Info.plist exists: $([ -f StreamCap.app/Contents/Info.plist ] && echo 'YES' || echo 'NO')"
        echo "Executable is executable: $([ -x StreamCap.app/Contents/MacOS/StreamCap ] && echo 'YES' || echo 'NO')"

    - name: Create archive for Windows
      if: matrix.platform == 'windows'
      shell: bash
      run: |
        cd dist
        7z a -tzip "../${{ matrix.artifact_name }}-v${{ steps.version.outputs.version }}.zip" StreamCap.exe

    - name: Create archive for macOS
      if: matrix.platform == 'macos'
      run: |
        cd dist
        tar -czf "../${{ matrix.artifact_name }}-v${{ steps.version.outputs.version }}.tar.gz" StreamCap.app

    - name: Upload Windows artifact
      if: matrix.platform == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-v${{ steps.version.outputs.version }}
        path: ${{ matrix.artifact_name }}-v${{ steps.version.outputs.version }}.zip
        retention-days: 30

    - name: Upload macOS artifact
      if: matrix.platform == 'macos'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-v${{ steps.version.outputs.version }}
        path: ${{ matrix.artifact_name }}-v${{ steps.version.outputs.version }}.tar.gz
        retention-days: 30

  create-tag:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Extract version from pyproject.toml
      id: version
      run: |
        python -c "
        import tomllib
        with open('pyproject.toml', 'rb') as f:
            data = tomllib.load(f)
            version = data['project']['version']
            print(f'version={version}')
        " >> $GITHUB_OUTPUT

    - name: Check if tag exists
      id: check_tag
      run: |
        git fetch --tags
        if git tag -l "v${{ steps.version.outputs.version }}" | grep -q "v${{ steps.version.outputs.version }}"; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Tag v${{ steps.version.outputs.version }} already exists, skipping creation"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Tag v${{ steps.version.outputs.version }} does not exist, will create"
        fi

    - name: Create and push tag
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
        git push origin "v${{ steps.version.outputs.version }}"